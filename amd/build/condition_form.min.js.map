{"version":3,"file":"condition_form.min.js","sources":["../src/condition_form.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Condition modal form.\n *\n * @module     tool_dynamic_cohorts/condition_form\n * @copyright  2024 Catalyst IT\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * */\n\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n/**\n * A list of used selectors.\n */\nconst SELECTORS = {\n    ADD_CONDITION_BUTTON: '#id_conditionmodalbutton',\n    SELECT_CONDITION: '#id_condition',\n    CONDITIONS_LIST: '#conditions',\n    RULE_FORM_CONDITIONS_JSON: '#id_conditionjson',\n    RULE_FORM_IS_CONDITIONS_CHANGED: '#id_isconditionschanged',\n    CONDITIONS_NOT_SAVED_WARNING: '#tool-dynamic-cohorts-not-saved',\n    CONDITION_EDIT_ACTION: 'tool-dynamic-cohorts-condition-edit',\n    CONDITION_DELETE_ACTION: 'tool-dynamic-cohorts-condition-delete',\n    CONDITIONS: 'tool-dynamic-cohorts-conditions'\n};\n\n\n/**\n * Get modal form html body using fragment API.\n *\n * @param {string} className\n * @param {string} submittedData Submitted form data.\n * @param {any} defaults Default values for the form\n * @returns {Promise}\n */\nconst getModalFormBody = (className, submittedData, defaults) => {\n    if (defaults === undefined) {\n        defaults = '';\n    }\n\n    const params = {\n        classname: className,\n        jsonformdata: JSON.stringify(submittedData),\n        defaults: JSON.stringify(defaults),\n    };\n\n    return Fragment.loadFragment('tool_dynamic_cohorts', 'condition_form', 1, params);\n};\n\n/**\n * Display Modal form.\n *\n * @param {string} className\n * @param {any} defaults Default values for the form\n */\nconst displayModalForm = (className, defaults) => {\n\n    if (defaults === undefined) {\n        defaults = '';\n    }\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: getString('conditionformtitle', 'tool_dynamic_cohorts'),\n        body: getModalFormBody(className, '', defaults),\n        large: true,\n    }).then(function (modal) {\n\n        modal.getRoot().on(ModalEvents.save, function(e) {\n            e.preventDefault();\n            modal.getRoot().find('form').submit();\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            modal.destroy();\n        });\n\n        modal.getRoot().on('submit', 'form', function(e) {\n            e.preventDefault();\n            submitModalFormAjax(className, modal);\n        });\n\n        modal.show();\n    });\n};\n\n/**\n * Submit modal form via ajax.\n *\n * @param {string} className Condition class name.\n * @param {object} modal Modal object.\n */\nconst submitModalFormAjax = (className, modal) => {\n    const changeEvent = document.createEvent('HTMLEvents');\n    changeEvent.initEvent('change', true, true);\n\n    // Prompt all inputs to run their validation functions.\n    // Normally this would happen when the form is submitted, but\n    // since we aren't submitting the form normally we need to run client side\n    // validation.\n    modal.getRoot().find(':input').each(function(index, element) {\n        element.dispatchEvent(changeEvent);\n    });\n\n    const invalid = modal.getRoot().find('[aria-invalid=\"true\"]');\n\n    // If we found invalid fields, focus on the first one and do not submit via ajax.\n    if (invalid.length) {\n        invalid.first().focus();\n    } else {\n        const submittedData = modal.getRoot().find('form').serialize();\n\n        Ajax.call([{\n            methodname: 'tool_dynamic_cohorts_submit_condition_form',\n            args: {classname: className, jsonformdata: JSON.stringify(submittedData)},\n            done: function (response) {\n                updateCondition(response);\n                renderConditions(getConditions());\n                modal.destroy();\n            },\n            fail: function () {\n                modal.setBody(getModalFormBody(className, submittedData, ''));\n            }\n        }]);\n    }\n};\n\n/**\n * Update condition with provided data.\n *\n * @param {object} data Updated condition data.\n */\nconst updateCondition = (data) => {\n    let condition = {...data};\n\n    let conditions = getConditions();\n\n    if (condition.sortorder >= 0) {\n        conditions[condition.sortorder] = condition;\n    } else {\n        conditions.push(condition);\n        condition.sortorder = conditions.length - 1;\n    }\n\n    saveConditionsToRuleForm(conditions);\n};\n\n/**\n * Get a list of all conditions.\n *\n * @returns {*[]}\n */\nconst getConditions = () => {\n    let conditions = [];\n    const conditionsjson = document.querySelector(SELECTORS.RULE_FORM_CONDITIONS_JSON).value;\n    if (conditionsjson !== '') {\n        conditions = JSON.parse(conditionsjson);\n    }\n    return conditions;\n\n};\n\n/**\n * Save a list of conditions to a rule form element.\n *\n * @param {array} conditions A list of conditions to save\n */\nconst saveConditionsToRuleForm = (conditions) => {\n    document.querySelector(SELECTORS.RULE_FORM_CONDITIONS_JSON).setAttribute('value', JSON.stringify(conditions));\n    document.querySelector(SELECTORS.RULE_FORM_IS_CONDITIONS_CHANGED).setAttribute('value', 1);\n};\n\n/**\n * Display a warning that conditions are not saved.\n */\nconst displayNotSavedWarning = () => {\n    document.querySelector(SELECTORS.CONDITIONS_NOT_SAVED_WARNING).classList.remove('hidden');\n};\n\n/**\n * Render conditions.\n *\n * @param {array} conditions A list of conditions to render.\n */\nconst renderConditions = (conditions) => {\n    Templates.render(\n        'tool_dynamic_cohorts/conditions',\n        {'conditions' : conditions}\n    ).then(function(html) {\n        document.querySelector(SELECTORS.CONDITIONS_LIST).innerHTML = html;\n        applyConditionActions();\n        displayNotSavedWarning();\n    }).fail(function() {\n        Notification.exception({message: 'Error updating conditions'});\n    });\n};\n\n/**\n * Apply actions to conditions.\n */\nconst applyConditionActions = () => {\n    document.getElementsByClassName(SELECTORS.CONDITIONS)[0].addEventListener('click', event => {\n        let element = event.target.tagName === 'SPAN' ? event.target : event.target.parentNode;\n\n        // On a click to a delete icon, grab the position of the selected for deleting condition\n        // and remove an element of that position from the list of all existing conditions.\n        // Then save updated list of conditions to the rule form and render new list on a screen.\n        if (element.className === SELECTORS.CONDITION_DELETE_ACTION) {\n            Notification.confirm(\n                getString('confirm', 'moodle'),\n                getString('delete_confirm_condition', 'tool_dynamic_cohorts'),\n                getString('yes', 'moodle'),\n                getString('no', 'moodle'),\n                function () {\n                    let sortorder = element.dataset.sortorder;\n                    let conditions = getConditions()\n                        .filter(c => c.sortorder != sortorder)\n                        .map((condition, index) => ({...condition, sortorder: index}));\n                    saveConditionsToRuleForm(conditions);\n                    renderConditions(conditions);\n                });\n        }\n\n        // On a click to an edit icon for a selected condition, grab condition data from the list of\n        // all conditions by its position and then render modal form using the condition class.\n        if (element.className === SELECTORS.CONDITION_EDIT_ACTION) {\n            let sortorder = element.dataset.sortorder;\n            let conditions = getConditions();\n            let condition = conditions[sortorder];\n\n            displayModalForm(condition.classname, condition);\n        }\n    });\n};\n\n/**\n * Init of the module.\n */\nexport const init = () => {\n    const addButton = document.querySelector(SELECTORS.ADD_CONDITION_BUTTON);\n    const conditionSelect = document.querySelector(SELECTORS.SELECT_CONDITION);\n\n    addButton.addEventListener('click', (e) => {\n        e.preventDefault();\n        const className = conditionSelect.value;\n        if (className !== '') {\n            displayModalForm(className, '');\n        }\n    });\n    applyConditionActions();\n};\n"],"names":["SELECTORS","getModalFormBody","className","submittedData","defaults","undefined","params","classname","jsonformdata","JSON","stringify","Fragment","loadFragment","displayModalForm","create","type","ModalFactory","types","SAVE_CANCEL","title","body","large","then","modal","getRoot","on","ModalEvents","save","e","preventDefault","find","submit","hidden","destroy","submitModalFormAjax","show","changeEvent","document","createEvent","initEvent","each","index","element","dispatchEvent","invalid","length","first","focus","serialize","call","methodname","args","done","response","updateCondition","renderConditions","getConditions","fail","setBody","data","condition","conditions","sortorder","push","saveConditionsToRuleForm","conditionsjson","querySelector","value","parse","setAttribute","render","html","innerHTML","applyConditionActions","classList","remove","exception","message","getElementsByClassName","addEventListener","event","target","tagName","parentNode","confirm","dataset","filter","c","map","addButton","conditionSelect"],"mappings":";;;;;;;sXAmCMA,+BACoB,2BADpBA,2BAEgB,gBAFhBA,0BAGe,cAHfA,oCAIyB,oBAJzBA,0CAK+B,0BAL/BA,uCAM4B,kCAN5BA,gCAOqB,sCAPrBA,kCAQuB,wCARvBA,qBASU,kCAYVC,iBAAmB,CAACC,UAAWC,cAAeC,iBAC/BC,IAAbD,WACAA,SAAW,UAGTE,OAAS,CACXC,UAAWL,UACXM,aAAcC,KAAKC,UAAUP,eAC7BC,SAAUK,KAAKC,UAAUN,kBAGtBO,kBAASC,aAAa,uBAAwB,iBAAkB,EAAGN,SASxEO,iBAAmB,CAACX,UAAWE,iBAEhBC,IAAbD,WACAA,SAAW,2BAGFU,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,qBAAsB,wBACvCC,KAAMnB,iBAAiBC,UAAW,GAAIE,UACtCiB,OAAO,IACRC,MAAK,SAAUC,OAEdA,MAAMC,UAAUC,GAAGC,sBAAYC,MAAM,SAASC,GAC1CA,EAAEC,iBACFN,MAAMC,UAAUM,KAAK,QAAQC,YAGjCR,MAAMC,UAAUC,GAAGC,sBAAYM,QAAQ,WACnCT,MAAMU,aAGVV,MAAMC,UAAUC,GAAG,SAAU,QAAQ,SAASG,GAC1CA,EAAEC,iBACFK,oBAAoBhC,UAAWqB,UAGnCA,MAAMY,WAURD,oBAAsB,CAAChC,UAAWqB,eAC9Ba,YAAcC,SAASC,YAAY,cACzCF,YAAYG,UAAU,UAAU,GAAM,GAMtChB,MAAMC,UAAUM,KAAK,UAAUU,MAAK,SAASC,MAAOC,SAChDA,QAAQC,cAAcP,sBAGpBQ,QAAUrB,MAAMC,UAAUM,KAAK,4BAGjCc,QAAQC,OACRD,QAAQE,QAAQC,YACb,OACG5C,cAAgBoB,MAAMC,UAAUM,KAAK,QAAQkB,0BAE9CC,KAAK,CAAC,CACPC,WAAY,6CACZC,KAAM,CAAC5C,UAAWL,UAAWM,aAAcC,KAAKC,UAAUP,gBAC1DiD,KAAM,SAAUC,UACZC,gBAAgBD,UAChBE,iBAAiBC,iBACjBjC,MAAMU,WAEVwB,KAAM,WACFlC,MAAMmC,QAAQzD,iBAAiBC,UAAWC,cAAe,WAWnEmD,gBAAmBK,WACjBC,UAAY,IAAID,MAEhBE,WAAaL,gBAEbI,UAAUE,WAAa,EACvBD,WAAWD,UAAUE,WAAaF,WAElCC,WAAWE,KAAKH,WAChBA,UAAUE,UAAYD,WAAWhB,OAAS,GAG9CmB,yBAAyBH,aAQvBL,cAAgB,SACdK,WAAa,SACXI,eAAiB5B,SAAS6B,cAAclE,qCAAqCmE,YAC5D,KAAnBF,iBACAJ,WAAapD,KAAK2D,MAAMH,iBAErBJ,YASLG,yBAA4BH,aAC9BxB,SAAS6B,cAAclE,qCAAqCqE,aAAa,QAAS5D,KAAKC,UAAUmD,aACjGxB,SAAS6B,cAAclE,2CAA2CqE,aAAa,QAAS,IAetFd,iBAAoBM,gCACZS,OACN,kCACA,YAAgBT,aAClBvC,MAAK,SAASiD,MACZlC,SAAS6B,cAAclE,2BAA2BwE,UAAYD,KAC9DE,wBAdJpC,SAAS6B,cAAclE,wCAAwC0E,UAAUC,OAAO,aAgB7ElB,MAAK,iCACSmB,UAAU,CAACC,QAAS,kCAOnCJ,sBAAwB,KAC1BpC,SAASyC,uBAAuB9E,sBAAsB,GAAG+E,iBAAiB,SAASC,YAC3EtC,QAAmC,SAAzBsC,MAAMC,OAAOC,QAAqBF,MAAMC,OAASD,MAAMC,OAAOE,cAKxEzC,QAAQxC,YAAcF,yDACToF,SACT,mBAAU,UAAW,WACrB,mBAAU,2BAA4B,yBACtC,mBAAU,MAAO,WACjB,mBAAU,KAAM,WAChB,eACQtB,UAAYpB,QAAQ2C,QAAQvB,UAC5BD,WAAaL,gBACZ8B,QAAOC,GAAKA,EAAEzB,WAAaA,YAC3B0B,KAAI,CAAC5B,UAAWnB,aAAemB,UAAWE,UAAWrB,UAC1DuB,yBAAyBH,YACzBN,iBAAiBM,eAMzBnB,QAAQxC,YAAcF,gCAAiC,KACnD8D,UAAYpB,QAAQ2C,QAAQvB,UAE5BF,UADaJ,gBACUM,WAE3BjD,iBAAiB+C,UAAUrD,UAAWqD,8BAQ9B,WACV6B,UAAYpD,SAAS6B,cAAclE,gCACnC0F,gBAAkBrD,SAAS6B,cAAclE,4BAE/CyF,UAAUV,iBAAiB,SAAUnD,IACjCA,EAAEC,uBACI3B,UAAYwF,gBAAgBvB,MAChB,KAAdjE,WACAW,iBAAiBX,UAAW,OAGpCuE"}